#!/bin/bash
set -e
echo "𝖫𝖪𝖱 - 𝖫𝖮𝖢𝖠𝖫 𝖪𝖴𝖡𝖤𝖱𝖭𝖤𝖳𝖤𝖲 𝖱𝖴𝖭𝖭𝖤𝖱"
if [ "$#" -eq 0 ]; then
    echo "Local Kubernetes Runner."
    echo "lkr <any-command-targeting-local-k8s-instance>"
    echo ""
    echo "  start: start a k8s instance"
    echo "  stop: start a k8s instance"
    echo "  9: k9s"
    echo "  k: kubectl"
    exit 1
fi



#container_engine=podman
container_engine=docker
container_name=lkr
docker_image=rancher/k3s:v1.25.3-k3s1
workdir=/tmp/lkr

with_retries() {
    for i in {1..5}; do "$@" 2>/dev/null && break || sleep 1; done
}

start() {
    mkdir -p $workdir
    mkdir -p $workdir/containers
    $container_engine run --rm -d \
        --name $container_name \
        -v /sys/fs/cgroup:/sys/fs/cgroup:rw \
        -v $workdir/containers:/containers \
        --cgroupns=host \
        --privileged \
        -p 6443:6443 \
        $docker_image server --tls-san=localhost --disable=traefik --service-node-port-range=30000-32767
    echo "k3s is starting..."

    with_retries $container_engine cp $container_name:/etc/rancher/k3s/k3s.yaml $workdir/kubeconfig
    with_retries KUBECONFIG=$workdir/kubeconfig kubectl wait --for=condition=Ready nodes --all --timeout=600s
    echo "k3s ready, creating 'ns' namespace.."
    in_context kubectl create namespace ns
    in_context kubectl config set-context --current --namespace=ns
    echo "Done."
    echo "Use now your cluster prepending lkr to your commands:"
    echo "  lkr k9s"
    echo "  lkr kubectl get pods"
    echo "  lkr helm list"
}
stop() {
    $container_engine rm -f $container_name 2>/dev/null
    rm -rf $workdir
}

in_context() {
    KUBECONFIG=$workdir/kubeconfig "$@"
}

load() {
    echo "Loading image $1"
    id=$(docker inspect $1 | jq -r '.[0].Id')
    filename=$(echo $id | base64)
    host_filename=$workdir/containers/$filename
    if [ ! -f "$host_filename" ]; then
        echo "Generating image tarball.."
        docker save $1 > $workdir/containers/$dir_name
    fi
    echo "Importing image.."
    $container_engine exec $container_name ctr image import /containers/$dir_name
    echo "Loaded"
}

shell() {
    $container_engine exec -it $container_name sh
}

if [ "$1" == "start" ]; then
    stop
    start
elif [ "$1" == "stop" ]; then
    stop
elif [ "$1" == "logs" ]; then
    $container_engine logs $container_name
elif [ "$1" == "shell" ]; then
    shell
elif [ "$1" == "load" ]; then
    shift 
    load "$@"
elif [ "$1" == "k" ]; then
    shift
    in_context kubectl "$@"
elif [ "$1" == "9" ]; then
    shift
    in_context k9s "$@"
else
    in_context "$@"
fi